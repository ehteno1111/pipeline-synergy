name: CI-Security-Flow
on: [push, pull_request]

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test-and-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit flake8
      - name: Lint
        run: flake8 app
      - name: Unit tests
        run: pytest -q
      - name: SAST (Bandit)
        run: bandit -r app -f txt -o bandit.txt || true
      - name: Upload SAST artifact
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit.txt

  iac-validate-and-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ---------- Terraform fmt + validate ----------
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt (check)
        working-directory: infra/terraform
        run: terraform fmt -check

      - name: Terraform init (no backend)
        working-directory: infra/terraform
        run: terraform init -backend=false

      - name: Terraform validate
        working-directory: infra/terraform
        run: terraform validate

      # ---------- tfsec (IaC security scan) ----------
      - name: tfsec scan
        uses: aquasecurity/tfsec-action@v1
        with:
          working_directory: infra/terraform
          format: sarif
          sarif_file: tfsec.sarif
          additional_args: --soft-fail
      - name: Upload tfsec SARIF
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-report
          path: tfsec.sarif

      # ---------- Kubernetes manifest validation ----------
      - name: Install kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/download/v0.6.8/kubeconform-linux-amd64.tar.gz \
          | tar xz && sudo mv kubeconform /usr/local/bin/kubeconform

      - name: Validate K8s manifests
        run: kubeconform -strict -summary -ignore-missing-schemas k8s/*.yaml

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [test-and-sast, iac-validate-and-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}/pipeline-synergy:${{ github.sha }} .
      - name: Login GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: docker push ghcr.io/${{ github.repository }}/pipeline-synergy:${{ github.sha }}
      - name: Trivy scan (container)
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ghcr.io/${{ github.repository }}/pipeline-synergy:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  zap-baseline-dast:
    runs-on: ubuntu-latest
    needs: build-and-scan-image
    steps:
      - uses: actions/checkout@v4
      - name: Run app in background
        run: |
          docker run -d -p 8000:8000 ghcr.io/${{ github.repository }}/pipeline-synergy:${{ github.sha }}
          sleep 5
      - name: OWASP ZAP Baseline
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          allow_issue_writing: false
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
